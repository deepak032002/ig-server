// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  profilePic String   @default("")
  email      String   @unique
  phone      String
  password   String
  role       Role     @default(USER)
  isVerified Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  address Address?
  article Article[]
  logs    Logs[]

  @@index([email, firstName])
  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  country   String
  pincode   String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Article {
  id              String   @id @default(uuid())
  title           String   @unique
  categoryId      String?
  metaDescription String   @default("")
  metaTitle       String   @default("")
  content         String
  thumbnail       String?  @default("")
  userId          String?
  isPublished     Boolean  @default(false)
  viewersCount    Int?     @default(0)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tags     Tag[]
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  source   Source?

  @@index([title])
  @@map("articles")
}

model Source {
  id        String   @id @default(uuid())
  title     String
  link      String
  articleId String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("sources")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article[]

  @@map("tags")
}

model Logs {
  id        String   @id @default(uuid())
  message   String
  level     String
  service   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("logs")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AUTHOR
  USER
}
